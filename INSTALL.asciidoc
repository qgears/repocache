= Repocache Installation

== Building and installing repocache

Tools required for the build:

* OpenJDK 8
* maven (tested with 3.0.5 and 3.3.9)

Build has been tested under Ubuntu 14.04.3 and 16.04.2 LTS.

=== Steps specific to Ubuntu 14.04.3

[source,bash]
----
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk
----

=== Generic steps

Copy the following snippet into ~/.m2/toolchains.xml:
[source,xml]
----
<toolchains>
  <!-- ... -->
  <!-- JDK toolchains -->
  <toolchain>
    <type>jdk</type>
    <provides>
      <id>JavaSE-1.8</id>
    </provides>
    <configuration>
      <jdkHome>/usr/lib/jvm/java-8-openjdk-amd64/jre</jdkHome>
    </configuration>
  </toolchain>
  <!-- ... -->
</toolchains>

----
Install script is as follows - note that it will require sudo password when installing the application:

[source,bash]
----
#!/bin/bash

mkdir -p ~/git/qgears
cd ~/git/qgears

git clone --recursive https://github.com/qgears/repocache.git

cd repocache
mvn package
# or maybe 'mvn integration-test' to run the build with tests

# The file matching the repocache-$VERSION-$DATE.jar pattern will be found here:
cd hu.qgears.repocache/target/
ls -lah

# Selecting the most recently built jar file
MOST_RECENT=$(ls -Art repocache-*.jar | tail -n 1)
echo $MOST_RECENT

INSTALL_DIR=/opt/repocache

sudo mkdir $INSTALL_DIR
sudo cp $MOST_RECENT $INSTALL_DIR
sudo ln -s /opt/repocache/$MOST_RECENT /opt/repocache/repocache.jar

cd ../..

# Edit and customize the following startup script, then them to their final locations!

# Upstart startup script suitable for Ubuntu 14 LTS and 16 LTS:
sudo cp hu.qgears.repocache/doc/repocache.conf /etc/init
sudo chown root:root /etc/init/repocache.conf

# Copying configuration:
sudo cp hu.qgears.repocache/doc/sample-config/* /opt/repocache

# Allowing write access to the current user
sudo chown $(id -ng):$(id -nu) $INSTALL_DIR -Rc

----

== Starting repocache

In order to start repocache manually, issue the following command:
[source,bash]
----
sudo service repocache start
----

Now, you have a working HTTP proxy repocache installation and a running instance, so you may configure your applications that require repository artifact caching, like _maven_.

Web administration interface: http://repocache.yourdomain.com:18081.

Note that HTTPS proxying is not available at this stage; see the following chapter for the setup.

== HTTPS proxy setup

Scenario: setting up repocache as a HTTPS proxy with a self signed certificate, exclusively locally on a workstation.

Assumption: the name `repocache.yourdomain.com` is a valid, resolvable domain name on your computer. For a single-workstation setup, ensure that the following entry is present in your `/etc/hosts` file:
----
127.0.1.1       repocache.yourdomain.com
----

Open http://repocache.yourdomain.com:18081/config.html and press the button titled ''Initialize certs folder''. The `/opt/repocache/certs` directory will be created.

Customize the `certs/template.cert.config` with arbitrary data, then execute the `rootcerts.sh` script as follows, to create a certificate for the `repocache.yourdomain.com` hostname:

[source,bash]
----
cd /opt/repocache/certs
./rootcerts.sh repocache.yourdomain.com
----

This way, you will have a self signed certificate, that you will be able to use on your local workstation after installing it as follows:
[source,bash]
----
cd /opt/repocache/certs/public
sudo cp repocache.yourdomain.com.crt /usr/local/share/ca-certificates
sudo update-ca-certificates
# Update the init script to make repocache utilize the newly
# generated certificate and signing keys
sudo sed -i 's/--repocacheHostName\ repocache.qgears.com/--repocacheHostName\ repocache.yourdomain.com/g' /etc/init/repocache.conf
# Restart repocache
sudo service repocache restart
----

Now your workstation will accept the certificate and will be able to act as HTTPS proxy clients.

TIP: If you want more workstations to use the currently configured repocache instance to use as an HTTPS repo artifact proxy, don't forget to copy the `repocache.yourdomain.com.crt` file to their `/usr/local/share/ca-certificate` folders and issue the `update-ca-certificates` command on all workstations.

== Testing the HTTPS proxy download

Issue the following command:

[source,bash]
----
wget -e use_proxy=yes -e https_proxy=repocache.yourdomain.com:18083 https://repo1.maven.org/maven2/ant/ant/maven-metadata.xml
----

If the configuration has been successful, `wget` is expected to produce output similar to this:
[source,bash]
----
--2018-03-19 15:16:04--  https://repo1.maven.org/maven2/ant/ant/maven-metadata.xml
Resolving repocache.yourdomain.com (repocache.yourdomain.com)... 127.0.0.1
Connecting to repocache.yourdomain.com (repocache.yourdomain.com)|127.0.0.1|:18083... connected.
Proxy request sent, awaiting response... 200 OK
Length: 537 [application/xml]
Saving to: ‘maven-metadata.xml’

100%[=========================================================================================================================================================================>] 537         --.-K/s   in 0s

2018-03-19 15:16:05 (155 MB/s) - ‘maven-metadata.xml’ saved [537/537]

----
